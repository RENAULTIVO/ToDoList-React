[{"/home/level/Documents/react/todo-list/src/index.js":"1","/home/level/Documents/react/todo-list/src/reportWebVitals.js":"2","/home/level/Documents/react/todo-list/src/App.js":"3","/home/level/Documents/react/todo-list/src/components/RippleButton.js":"4","/home/level/Documents/react/todo-list/src/data/LocalDataManager.js":"5","/home/level/Documents/react/todo-list/src/components/ToDoList.js":"6","/home/level/Documents/react/todo-list/src/components/AddToDoItem.js":"7","/home/level/Documents/react/todo-list/src/components/TextInput.js":"8","/home/level/Documents/react/todo-list/src/components/ToDoItem.js":"9","/home/level/Documents/react/todo-list/src/components/DoneList.js":"10"},{"size":500,"mtime":1611709855425,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1611709688254,"results":"13","hashOfConfig":"12"},{"size":2256,"mtime":1611796808047,"results":"14","hashOfConfig":"12"},{"size":1873,"mtime":1611795741292,"results":"15","hashOfConfig":"12"},{"size":785,"mtime":1611793320587,"results":"16","hashOfConfig":"12"},{"size":1007,"mtime":1611796237181,"results":"17","hashOfConfig":"12"},{"size":2094,"mtime":1611796496262,"results":"18","hashOfConfig":"12"},{"size":1009,"mtime":1611793038595,"results":"19","hashOfConfig":"12"},{"size":2390,"mtime":1611797036128,"results":"20","hashOfConfig":"12"},{"size":955,"mtime":1611797001731,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"137cmtt",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/level/Documents/react/todo-list/src/index.js",[],["47","48"],"/home/level/Documents/react/todo-list/src/reportWebVitals.js",[],"/home/level/Documents/react/todo-list/src/App.js",[],"/home/level/Documents/react/todo-list/src/components/RippleButton.js",["49","50"],"import { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport styled from 'styled-components';\n\nconst RippleElement = styled.div`\n\ttop: ${props => props.top}px;\n\tleft: ${props => props.left}px;\n\twidth: ${props => props.size}px;\n\theight: ${props => props.size}px;\n\tposition: absolute;\n\tanimation: ${props => props.animation};\n\tborder-radius: 50%;\n\tpointer-events: none;\n\tbackground-color: #000000;\n`;\n\nexport default function RippleButton(props) {\n\n\tlet isMount = true;\n\n\tconst [rippleState, setRippleState] = useState(false);\n\t\n\tconst [clickInfo, setClickInfo] = useState({\n\t\ttop: 0,\n\t\tleft: 0,\n\t\ttarget: null\n\t});\n\n\tconst [rippleSettings, setRippleSettings] = useState({\n\t\ttop: 0,\n\t\tleft: 0,\n\t\tsize: 0,\n\t\tanimation: ''\n\t});\n\n\tconst rippleElement = (\n\t\t<RippleElement\n\t\t\ttop={rippleSettings.top}\n\t\t\tleft={rippleSettings.left}\n\t\t\tsize={rippleSettings.size}\n\t\t\tanimation={rippleSettings.animation} />\n\t);\n\n\tuseEffect(() => {\n\n\t\tif (clickInfo.target != null\n\t\t\t&& rippleState\n\t\t\t&& props.disable != \"true\") {\n\n\t\t\tlet size = Math.max(clickInfo.target.offsetWidth, clickInfo.target.offsetHeight) * 2;\n\n\t\t\tsetRippleSettings({\n\t\t\t\ttop: clickInfo.top - (size/2),\n\t\t\t\tleft: clickInfo.left - (size/2),\n\t\t\t\tsize,\n\t\t\t\tanimation: 'rippleEffect linear 0.5s'\n\t\t\t});\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (isMount) {\n\t\t\t\t\tsetRippleState(false);\n\t\t\t\t}\n\t\t\t}, 490);\n\n\t\t}\n\n\t\treturn () => {\n\t\t\tisMount = false;\n\t\t}\n\n\t}, [clickInfo]);\n\n\treturn (\n\t\t<button\n\t\t\t{...props}\n\t\t\tclassName={props.className}\n\t\t\tstyle={{...props.style, position: 'relative', overflow: 'hidden'}}\n\t\t\tonMouseDown={function(e) {\n\n\t\t\t\tif (rippleState) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tsetClickInfo({\n\t\t\t\t\ttop: e.nativeEvent.offsetY,\n\t\t\t\t\tleft: e.nativeEvent.offsetX,\n\t\t\t\t\ttarget: e.target\n\t\t\t\t});\n\n\t\t\t\tsetRippleState(true);\n\n\t\t\t}}>\n\t\t\t\t{props.children}\n\t\t\t\t{ rippleState && isMount ? rippleElement : null }\n\t\t</button>\n\t);\n\n}","/home/level/Documents/react/todo-list/src/data/LocalDataManager.js",["51","52"],"export default class LocalDataManager {\n\n\tconstructor() {\n\t\tthis.onChangeListenerList = new Array();\n\t}\n\n  getAll() {\n\t\tlet data = new Object();\n\t\tObject.keys(localStorage).forEach(key => data[key] = JSON.parse(localStorage[key]));\n\t\treturn data;\n\t}\n\n\tsaveObject(jsObject) {\n\t\tObject.keys(jsObject).forEach(key => localStorage[key] = JSON.stringify(jsObject[key]));\n\t\tthis.onChangeListenerList.forEach(onChangeListener => onChangeListener());\n\t}\n\n\tgetObject(objName) {\n\t\treturn localStorage[objName] != null ? JSON.parse(localStorage[objName]) : null;\n\t}\n\n\tset(name, value) {\n\t\tlocalStorage[name] = value;\n\t\tthis.onChangeListenerList.forEach(onChangeListener => onChangeListener());\n\t}\n\n\tsetOnChangeListener(onChangeListener) {\n\t\tthis.onChangeListenerList.push(onChangeListener);\n\t}\n\n}","/home/level/Documents/react/todo-list/src/components/ToDoList.js",[],"/home/level/Documents/react/todo-list/src/components/AddToDoItem.js",[],"/home/level/Documents/react/todo-list/src/components/TextInput.js",["53","54"],"import { useEffect, useState } from \"react/cjs/react.development\";\nimport styled from \"styled-components\";\n\nconst Input = styled.input`\n\twidth: 90%;\n\tcolor: #DDDDDD;\n\tborder: 2px solid #444444;\n\tmargin: 10px;\n\tpadding: 10px;\n\toutline: none;\n\tfont-size: 18px;\n\tborder-radius: 10px;\n\tbackground-color: #333333;\n`;\n\nexport default function TextInput(props) {\n\n    const [lastEvent, setLastEvent] = useState(null);\n\n    useEffect(() => {\n\n        if (lastEvent != null){\n            lastEvent.target.value = '';\n        }\n        \n    }, [props.resetOnChange]);\n\n    function keyPressHandler(key) {\n        setLastEvent(key);\n        \n        if (props.onValueChange) {\n            props.onValueChange(key.target.value)\n        }\n\n        if (key.key == \"Enter\"\n            && props.onEnter) {\n            props.onEnter(key.target.value)\n            key.target.value = '';\n        }\n\n    }\n\n    return (\n        <Input\n            onKeyUp={keyPressHandler}\n            placeholder={props.placeholder} />\n    );\n\n}","/home/level/Documents/react/todo-list/src/components/ToDoItem.js",["55"],"import '../App.scss';\nimport styled from \"styled-components\";\nimport RippleButton from './RippleButton';\nimport checkSVG from '../icons/check.svg';\nimport deleteSVG from '../icons/delete.svg';\n\nconst ToDoItemBox = styled.div`\n\twidth: 90%;\n\tmargin: 20px auto;\n\tanimation: fadeInZoomIn linear 0.5s;\n\tborder-radius: 20px;\n\tanimation-delay: ${props => props.delay}ms;\n\tbackground-color: #181818;\n`;\n\nconst ItemTitle = styled.div`\n\tflex: 4;\n\theight: 100px;\n\tpadding: 20px 40px 20px 40px;\n\toverflow-y: auto;\n\tfont-size: 20px;\n\tfont-family: monospace;\n\tbackground-color: #181818;\n\tborder-top-left-radius: 20px;\n\tborder-bottom-left-radius: 20px;\n`;\n\nconst ActionsBox = styled.div`\n\tflex: 1;\n\tmin-width: 60px;\n\tmax-width: 100px;\n\tborder-top-right-radius: 20px;\n\tborder-bottom-right-radius: 20px;\n`;\n\nconst ActionButton = styled.div`\n\tflex: 1;\n\tborder: none;\n    outline: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\tbackground-color: ${props => props.background};\n\tborder-radius:${props => typeof props.borders == \"object\" ? props.borders.map(border => ` ${border}px`) : ''};\n`;\n\nconst ButtonLogo = styled.img`\n\twidth: 40px;\n\theight: 40px;\n\tpointer-events: none;\n`;\n\n\nexport default function ToDoItem(props) {\n\n\tfunction removeItem() {\n\t\tconsole.log('on remove. index: ', props.index);\n\t\tprops.onItemRemove(props.index);\n\t}\n\n\treturn (\n\t\t<ToDoItemBox delay={props.delay} className=\"flexBox rowDirection\">\n\t\t\t<ItemTitle className=\"flexBox alignCenter\">{props.title}</ItemTitle>\n\t\t\t{\n\t\t\t\t!props.done ? (\n\t\t\t\t\t\t<ActionsBox className=\"flexBox columnDirection\">\n\t\t\t\t\t\t\t<ActionButton\n                                disable={(!props.done).toString()}\n\t\t\t\t\t\t\t\tonClick={props.onCheck}\n\t\t\t\t\t\t\t\tclassName=\"desktopPointer\" background=\"#2ECC71\" borders={[0, 20, 0, 0]}>\n\t\t\t\t\t\t\t\t<ButtonLogo src={checkSVG} />\n\t\t\t\t\t\t\t</ActionButton>\n\t\t\t\t\t\t\t<ActionButton\n\t\t\t\t\t\t\t\tonClick={removeItem}\n\t\t\t\t\t\t\t\tclassName=\"desktopPointer\" background=\"#F94646\" borders={[0, 0, 20, 0]}>\n\t\t\t\t\t\t\t\t<ButtonLogo src={deleteSVG} />\n\t\t\t\t\t\t\t</ActionButton>\n\t\t\t\t\t\t</ActionsBox>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<ActionsBox className=\"flexBox columnDirection doneItemStatusBox\">\n\t\t\t\t\t\t\t<ActionButton\n\t\t\t\t\t\t\t\tonClick={removeItem}\n\t\t\t\t\t\t\t\tclassName=\"desktopPointer\" background=\"#F94646\" borders={[0, 20, 20, 0]}>\n\t\t\t\t\t\t\t\t<ButtonLogo src={deleteSVG} />\n\t\t\t\t\t\t\t</ActionButton>\n\t\t\t\t\t\t</ActionsBox>\n\t\t\t\t\t)\n\t\t\t}\n\t\t</ToDoItemBox>\n\t);\n\n}","/home/level/Documents/react/todo-list/src/components/DoneList.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":48,"column":21,"nodeType":"62","messageId":"63","endLine":48,"endColumn":23},{"ruleId":"64","severity":1,"message":"65","line":68,"column":14,"nodeType":"66","endLine":68,"endColumn":19},{"ruleId":"67","severity":1,"message":"68","line":4,"column":31,"nodeType":"69","messageId":"70","endLine":4,"endColumn":42},{"ruleId":"71","severity":1,"message":"72","line":8,"column":14,"nodeType":"69","messageId":"70","endLine":8,"endColumn":26},{"ruleId":"64","severity":1,"message":"73","line":26,"column":8,"nodeType":"74","endLine":26,"endColumn":29,"suggestions":"75"},{"ruleId":"60","severity":1,"message":"76","line":35,"column":21,"nodeType":"62","messageId":"63","endLine":35,"endColumn":23},{"ruleId":"77","severity":1,"message":"78","line":3,"column":8,"nodeType":"79","messageId":"80","endLine":3,"endColumn":20},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","Assignments to the 'isMount' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","no-new-object","The object literal notation {} is preferrable.","React Hook useEffect has a missing dependency: 'lastEvent'. Either include it or remove the dependency array.","ArrayExpression",["83"],"Expected '===' and instead saw '=='.","no-unused-vars","'RippleButton' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},"Update the dependencies array to be: [lastEvent, props.resetOnChange]",{"range":"86","text":"87"},[534,555],"[lastEvent, props.resetOnChange]"]